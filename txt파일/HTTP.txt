 http - 프로토콜(클라이언트 - 서버 프로토콜) : 서로 주고받는 단방향 
	데이터를 주고 받을 때 규칙에 맞춰서 개발

웹문서 - http
파일 - ftp
메일 - smtp, pop


localhost는 내 pc 웹 서버로 기본적으로 80port번호이고, 생략이 가능하다. 
   그 외의 포트번호는 명시적으로 기입해줘야 접근이 가능하다.

OSI 7계층 - 이 단계에 들어왔을 때 어떤 행위를 했으면 좋겠다고 하기 위함에 따른 표준화
	   즉, 네트워크에서 일어나는 통신을 7단계로 나눈 것을 의미한다.
 1     2     3     4    5    6    7
물리 데이터 네트워크 전송 세션 표현  응용 

응용 - 사용자가 네트워크에 직접 접근할 수 있도록 하는 계층
      프로토콜을 사용하여 서비스를 사용하는 것을 의미
      사용자 인터페이스, 데이터베이스 관리 등의 서비스를 제공
	ex) TELNET, HTTP, SSH, FTP 등

표현 - 번역의 역할을 하며 두 장치가 일관되게 전송 데이터를 서로 이해할 수 있도록 한다.
	데이터 변환, MIME 인코딩, 암호화 및 복호화, 압축 등을 다루게 된다.
	request 객체에 담아서 보낼 때 이런 역할

세션 - 통신 세션을 구성하는 계층으로 Port 연결이라고도 부른다.
	통신 장치 간의 상호작용을 설정하고 유지하며 동기화를 한다. 
	사용자 간의 포트연결(세션)이 유효한지 확인하고 설정한다.
	대표적인 프로토콜은 SSH, TLS가 있다.
	즉, 설정한 포트번호로 연결시켜주는 역할 ex) localhost:8888

pc에는 os 안에 server(톰캣)이 있다.

전송 - 전송받은 패킷들의 전송이 유효한지 확인하고, 실패한 패킷은 다시 보내는 등의 신뢰성 있는
	통신을 보장하며, 헤더 정보에 세그먼트가 포함된다.

	대표적인 장비로는 게이트웨이가 있다.

대표적인 프로토콜 TCP, UDP가 있다.
	TCP : 3way 쉐이크 방식 - UDP보단 느리지만 신뢰성이 높다.
	ex) 호상님 들리나요 ? 네 들립니다. 밥 먹었나요 ? 
	즉, 연결됐는지 확인하고 대답하기 때문에 느리다.
	
       UDP : 받는 상대의 연결은 중요하지 않고 보내는데 집중되어 있다.
	(스트리밍에서 간혹 버퍼링때문에 한번에 영상이 주루루룩 실행되는 그때 보임)

네트워크 계층 - 네트워크는 경로에 치중되어 있다.
	     각 패킷이 시작 시점에서 최종 목적지까지 성공적으로 전달되도록 한다.
		대표적인 프로토콜에는 IP가 있다.
	(ip는 192.168.122.0 이런식으로 되어있는데 이걸 기억하기 힘드니까 DNS를 사용한다.)
		대표적인 장비에는 라우터가 있다.

데이터링크 - 물리 계층의 상위 단계로서, 비트 형태로 전송된 데이터를 받는 계층을 의미한다.
			네트워크 상의 객체들 간 데이터를 전달하고, 물리 계층에서 발생할 수 없는 오류를 찾아서 수정하는 역할
			데이터 링크 계층에서 데이터 단위는 프레임(여러개의 비트의 모음)이다.
			대표적인 장비로는 브리지, 스위치가 있다.

물리 계층 - 전기적인, 기계적인 신호를 주고 받는 역할을 하는 계층으로 비트(0,1)의 통신단위로 통신한다.
			말그대로 물리적인 장비를 담당한다.
			대표적인 장비로는 허브, 리피터가 있다.


HTTP의 특징
1. 클라이언트 서버 구조
			클라이언트는 서버에 요청을 보내고 응답이 올때까지 대기를 한다.
			서버는 클라이어트에게 받은 요청에 대한 결과를 만들어서 응답을 해준다.
			(소켓서버를 만들어 응답을 기다리고, 소켓 객체를 만들어 객체가 담기면 객체에 잘 들어왔다고 응답해서 문자열로 보내준다.)

servlet - 네이버라는 요청을 보내면 개발자도구에서 networkd - general - reqeuest headers 등등 문자열로 전송을 보낸다.
			줄바꿈에 대한 내용들이 하나의 속성 - 단계가 끝나면 화이트로 하나씩 영역을 나타낸다.
			사용자가 요청을 보내면 그 요청정보에 대한 것을 꺼낼 수 있는데 그게 서블릿이 그 요청 정보에 대한것을 처리해주고 있었기 때문이다.

2. 무상태 프로토콜
			HTTP 서버는 클라이언트의 상태를 저장하지 않는다. ex) 커피숍에서 아아 달라고 하면 점원이 몇개 해드릴까요? 결제는 어떤걸로 하실거에요 ? 하는 것은
															  내가 점원에게 얘기하고 점원이 기억하고 어떤것으로 결제할거에요 하는 것은 상태를 유지하는 것이다.
															  근데 무상태는 아아 주문하는데 다시 뭐 주문할거냐고 물어보는 행위다.
															  즉, 서버는 상태 값을 저장하지 않는다. 

	2-1. 상태유지
			클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존하는 것을 의미한다.
			상태유지의 문제점으로는 사용하는 서버에 문제가 생겨 다른 서버를 사용해야하는 경우 기존의 값들에 대한 정보를 가지고 있지 못한다는 단점이 있다.
			만약 A라는 서버가 문제가 생기면 B라는 서버를 운용해야 하는데, 그러려면 B에 새로이 로그인을 해야하는 단점을 가진다는 것이다.

	2-2. 무상태 유지
			서버가 클라이언트의 상태를 보존하지 않는 것을 의미한다.
			서버는 단순하게 요청이 들어오면 응답을 보내주는 역할을 수행한다.
			클라이언트와 서버 간의 통신에 필요한 모든 정보는 클라이언트가 가지고 있다가 서버와 통신할 때 데이터를 담아서 전달하는 구조이다.
			서버는 상태유지를 하지 않아도 되기 때문에 부하가 상태유지보다 줄어들게 되며, 상태를 보관하고 있지 않기 때문에 서버가 변경되어도 응답하는데 문제 발생하지 않는다.
			대량의 트래픽이 발생할 경우 서버확장(스케일 아웃)을 통해서 수월하게 처리할 수 있는 장점이 있다.
			Stateful보다 더 많은 데이터가 소모되며 매번 요청할 때마다 정보를 넘겨주어야 한다.
3. 비연결성(Connectionless)
	1.0 기준으로 HTTP는 연결을 유지하지 않는 모델이다.
	불필요한 여결을 하지 않기 때문에 서버 내 유지 자원이 감소하게 되어 효율적으로 사용 가능하다.

